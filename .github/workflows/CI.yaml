name: CI

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    branches:
      - master

env: 
  DEBUG: 'napi:*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Install dependencies
        run: yarn install

      - name: Build
        if: matrix.os != 'macos-latest'
        run: yarn build

      - name: Build
        if: matrix.os == 'macos-latest'
        run: yarn build
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.os }}
          path: usb-enum.*.node

  build-windows-i686:
    name: i686-pc-windows-msvc
    runs-on: windows-latest
    env:
      CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 32
      CARGO_PROFILE_RELEASE_LTO: 'false'
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Install dependencies
        run: yarn install 

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Install i686 toolchain
        run: rustup target add i686-pc-windows-msvc

      - name: Cross build i686
        run: yarn build --target i686-pc-windows-msvc

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-win32-i686
          path: usb-enum.*.node

  build-linux-arm7:
    name: arm7-unknown-linux-gnu
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - name: Install cross compile toolchain
        run: |
          sudo dpkg --add-architecture armhf
          sudo sed -i "s/deb h/deb [arch=amd64] h/g" /etc/apt/sources.list
          printf "deb [arch=armhf,arm64] http://ports.ubuntu.com/ focal main restricted\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal-updates main restricted\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal-updates universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal multiverse\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal-updates multiverse\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal-backports main restricted universe multiverse\n" | sudo tee /etc/apt/sources.list.d/arm-cross-compile-sources.list
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf libudev-dev:armhf -y

      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Install toolchain
        run: rustup target add armv7-unknown-linux-gnueabihf

      - name: Install dependencies
        run: yarn install

      - name: Cross build arm7
        run: yarn build --target armv7-unknown-linux-gnueabihf
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: '/usr/lib/arm-linux-gnueabihf/pkgconfig'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-linux-arm7
          path: usb-enum.*.node

  build-linux-aarch64:
    name: aarch64-unknown-linux-gnu
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      
      - name: Install cross compile toolchain
        run: |
          sudo dpkg --add-architecture arm64
          sudo sed -i "s/deb h/deb [arch=amd64] h/g" /etc/apt/sources.list
          printf "deb [arch=armhf,arm64] http://ports.ubuntu.com/ focal main restricted\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal-updates main restricted\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal-updates universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal multiverse\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal-updates multiverse\ndeb [arch=armhf,arm64] http://ports.ubuntu.com/ focal-backports main restricted universe multiverse\n" | sudo tee /etc/apt/sources.list.d/arm-cross-compile-sources.list
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libudev-dev:arm64 -y

      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Install toolchain
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Install dependencies
        run: yarn install

      - name: Cross build aarch64
        run: yarn build --target aarch64-unknown-linux-gnu
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: '/usr/lib/aarch64-linux-gnu/pkgconfig'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-linux-aarch64
          path: usb-enum.*.node

  build-apple-silicon:
    name: aarch64-apple-darwin
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Install aarch64 toolchain
        run: rustup target add aarch64-apple-darwin

      - name: Install dependencies
        run: yarn install

      - name: Cross build aarch64
        run: yarn build --target aarch64-apple-darwin

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-apple-aarch64
          path: usb-enum.*.node

  publish:
    name: Publish
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - build
      - build-windows-i686
      - build-apple-silicon
      - build-linux-aarch64
      - build-linux-arm7

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Install dependencies
        run: yarn install

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: List packages
        run: ls -R npm
        shell: bash

      - name: Publish
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
